@addTagHelper *, Wangkanai.Detection
<style>
	.hide-block {
		display: none;
	}

	.user-name-block {
		padding-right: 10px;
	}
</style>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

	<meta name="google-signin-client_id" content="989279840088-b2v4s1cgc0jf8ijurkudlt9uh5p6tm7l.apps.googleusercontent.com">
    <title>@ViewData["Title"] - Магазин запчастей</title>
    <script src="https://vk.com/js/api/openapi.js?169" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="~/font-awesome-4.7.0/css/font-awesome.css">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" type="text/css" href="~/primeui/themes/aristo/theme.css">
    <link href="~/primeui/primeui-all.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="~/ckeditor/content-styles.css" type="text/css">
	<link rel="stylesheet" href="~/ckeditor/imageresize.css" type="text/css">
    
</head>
<body>
<header>
	<nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
		<div class="container-fluid">
			<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
			        aria-expanded="false" aria-label="Toggle navigation">
				<span class="navbar-toggler-icon"></span>
			</button>
			<div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
				<ul class="navbar-nav flex-grow-1">
					<li class="nav-item">
						<a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Главная</a>
					</li>
					<li class="nav-item">
						<a class="nav-link text-dark" asp-area="" asp-controller="ProductList" asp-action="Index">Магазин</a>
					</li>
					<li class="nav-item">
						<a class="nav-link text-dark" asp-controller="Articles" asp-action="Index">Статьи</a>
					</li>
					<li class="nav-item">
						<a class="nav-link text-dark" asp-controller="Contacts" asp-action="Index">Контакты</a>
					</li>
					<li class="nav-item">
						<a class="nav-link text-dark" asp-controller="Basket" asp-action="Index">Корзина</a>
					</li>
					<li class="hide-block nav-item" id="adminLink">
						<a class="nav-link text-dark" asp-area="" asp-controller="Admin" asp-action="Index">Администрирование</a>
					</li>
						<li class="hide-block nav-item" id="logInLink">
						<a class="nav-link text-dark" asp-area="" asp-controller="Login" asp-action="Authentication">Войти</a>
					</li>
					<li class="hide-block nav-item" id="logOutLink">
						<a class="nav-link text-dark" asp-area="" asp-controller="Login" asp-action="Logout">Выйти</a>
					</li>
				</ul>
			</div>
				<div id="userName" class="user-name-block"></div>
				<img id="userIcon" src="/images/guest.png" width="30" height="30"
				alt="User icon" />
		</div>
	</nav>
</header>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>
<script src="~/primeui/primeui-all.js"></script>

<div class="container">
	<main role="main" class="pb-3">
		<div id="messageControl"></div>
		@RenderBody()
	</main>
</div>

<footer class="border-top footer text-muted">
	<div class="container">
		&copy; 2023 - Магазин запчастей
	</div>
</footer>
	@await RenderSectionAsync("Scripts", required: false)
</body>
</html>


<script src="ckeditor/ckeditor.js" type="text/javascript"></script>
<script src="ckeditor/uploadAdapter.js" type="text/javascript"></script>

<script type="text/javascript">
$(document).ready(function() {
	MainMenuScript.init();
	CommonScript.Init();
});

const MainMenuScript = {
	  init() {

		  $.ajax({
			  url: '@Url.Action("GetAccountInfo", "Login")',
			  type: "GET",
				success: function (response) {

					if (response.isAuth == false) {

						$('#userName').text('Гость');
						$('#adminLink').hide();
						$('#logInLink').show();
						$('#logOutLink').hide();
					} else {

						$('#userName').text(response.name);
						$('#logInLink').hide();
						$('#logOutLink').show();
						

						if (response.isAdmin == true) {
							$('#adminLink').show();

							@*Разрешено редактирование страницы*@
							if ($('#allowEdit').length)
								MainMenuScript.addEditPageBlock($('#allowEdit').attr('pageName'));
							}

						if (response.pictureUrl !== undefined && response.pictureUrl.length !== 0) {
							$('#userIcon').attr('src', response.pictureUrl);
						}
					}
					
				},
			  error: function() {
			  }
		  });
	  },

	  _getEditPanelHtml() {
		return `<div>
			<button id="editPageBtn" class="hide-block" type="button">Редактировать</button>
			<button id="savePageBtn" class="hide-block" type="button">Сохранить</button>
		</div>
			<div id="editorControl"></div>`;
	  },

	  @*Добавляет кнопки редактирования страницы, если в режиме админа.*@
	  addEditPageBlock(pageName) {
		  $('#pageContent').before(MainMenuScript._getEditPanelHtml());

		  const editBtn = $('#editPageBtn');
		  editBtn.show();

		  editBtn.puibutton({
			  click: function(event) {
				  editBtn.hide();
				  $('#savePageBtn').show();
				  PageEditorScript.editPage();
			  }
		  });

		  $('#savePageBtn').hide();

		  $('#savePageBtn').puibutton({
			  click: function() {

				  PageEditorScript.savePage(pageName, () => {
					  $('#savePageBtn').hide();
					  editBtn.show();
					  location.reload(true);
				  });
			  }
		  });
	  }
}

//Вынести в связанный скрипт
function GearUploadAdapterPlugin( editor ) {
	editor.plugins.get( 'FileRepository' ).createUploadAdapter = ( loader ) => {
		// Configure the URL to the upload script in your back-end here!
			return new GearUploadAdapter(loader, '@Url.Action("UploadArticleImage", "UploadData")');
	};
}

const PageEditorScript = {
	_editor: null,

	@*Редактирование страницы*@
	editPage() {
	    let content = $('#pageContent').html();

		ClassicEditor
			.create(document.querySelector('#editorControl'),
				{

					// toolbar: [ 'heading', '|', 'bold', 'italic', 'link' ]
				})
			.then(editor => {
				window.editor = editor;
				PageEditorScript._editor = editor;
				editor.setData(content);
			})
			.catch(err => {
				console.error(err.stack);
			});
	},
	
	@*Добавление статьи на страницу*@
	addArticle() {
		ClassicEditor
			.create(document.querySelector('#articleEditorControl'),
				{
					extraPlugins: [GearUploadAdapterPlugin],
					// toolbar: [ 'heading', '|', 'bold', 'italic', 'link' ]
				})
			.then(editor => {
				window.editor = editor;
				PageEditorScript._editor = editor;
			})
			.catch(err => {
				console.error(err.stack);
			});
	},

	@*Возвращает описание статьи(описание и картинка)*@
	_articleInfo(body) {
		const data = {
			imageSrc: '',
			description: '' 
		};
		
		if (body.length !== 0) {
			data.imageSrc = $(body).find('img:first').attr('src');
			data.description = $(body).filter("p:first").text(); @*Первый параграф на превью*@
		}

		return data;
	},

	@*Сохранение новой статьи*@
	saveNewArticle(parentPageName, success) {

		const body  = PageEditorScript._editor.plugins.get('Title').getBody();
		const info = this._articleInfo(body);

		const dto = {
			title: PageEditorScript._editor.plugins.get('Title').getTitle(),
			titleImage: info.imageSrc,
			description: info.description,
			content: body,
			parentPageName: parentPageName
		};

		$.ajax({
			url: '@Url.Action("AddArticle","PageEditor")',
			method: "POST",
			data: { data: JSON.stringify(dto) },

			beforeSend: function() {
				//labelProcess.text('Загрузка файлов в базу данных…');
			},
			success: function(data) {
				CommonScript.showMessage('info', 'Успешно', '');

				PageEditorScript._editor.destroy().catch(error => {
					console.log( error );
				} );

				success();
			},
			error: function(error) {
				console.log(error);
				CommonScript.showMessage('error', 'Ошибка', 'Ошибка сохранения данных.');
			}
		});
	},

	@*Сохранение существующей статьи*@
	saveExistsArticle(id, success) {
		
		const body  = PageEditorScript._editor.plugins.get('Title').getBody();
		const info = this._articleInfo(body);

		const dto = {
			id: id,
			title: PageEditorScript._editor.plugins.get('Title').getTitle(),
			titleImage: info.imageSrc,
			description: info.description,
			content: body,
		};
		
		$.ajax({
			url: '@Url.Action("UpdateArticle", "PageEditor")',
			method: "POST",
			data: { data: JSON.stringify(dto) },

			beforeSend: function () {
				//labelProcess.text('Загрузка файлов в базу данных…');
			},
			success: function (data) {
				CommonScript.showMessage('info', 'Успешно', '');

				PageEditorScript._editor.destroy().catch(error => {
					console.log(error);
				});

				success();
			},
			error: function (error) {
				console.log(error);
				CommonScript.showMessage('error', 'Ошибка', 'Ошибка сохранения данных.');
			}
		});
	},

	editArticle(id) {
		$.ajax({
			url: '@Url.Action("GetArticle", "PageEditor")',
			method: "GET",
			data: { id: id },

			beforeSend: function () {
				//labelProcess.text('Загрузка файлов в базу данных…');
			},
			success: function (data) {
				
				ClassicEditor
					.create(document.querySelector('#articleEditorControl'),
						{
							extraPlugins: [GearUploadAdapterPlugin],

							// toolbar: [ 'heading', '|', 'bold', 'italic', 'link' ]
						})
					.then(editor => {
						const content = JSON.parse(data);
						editor.setData(content.title + content.content);
						window.editor = editor;
						PageEditorScript._editor = editor;
					})
					.catch(err => {
						console.error(err.stack);
					});
			},
			error: function (error) {
				console.log(error);
				CommonScript.showMessage('error', 'Ошибка', 'Ошибка сохранения данных.');
			}
		});
	},

	@*Удалить статью*@
		deleteArticle(id, success) {
		$.ajax({
			url: '@Url.Action("DeleteArticle", "PageEditor")',
			method: "POST",
			data: { id: id },

			beforeSend: function () {
				//labelProcess.text('Загрузка файлов в базу данных…');
			},
			success: function (data) {
				success();
			},
			error: function (error) {
				CommonScript.showMessage('error', 'Ошибка', 'Ошибка сохранения данных.');
			}
		});
	},

	@*Сохраняет страницу*@
	savePage(pageName, success) {
		const text = PageEditorScript._editor.getData();

		$.ajax({
			url: '@Url.Action("Save","PageEditor")',
			method: "POST",
			data: { text: text, pageName: pageName },

			beforeSend: function() {
				//labelProcess.text('Загрузка файлов в базу данных…');
			},
			success: function(data) {
				CommonScript.showMessage('info', 'Успешно', '');

				PageEditorScript._editor.destroy().catch(error => {
					console.log( error );
				} );

				success();
			},
			error: function(error) {
				console.log(error);
				CommonScript.showMessage('error', 'Ошибка', 'Ошибка сохранения данных.');
			}
		});
	}
}

@*Общий набор функций для всех страниц.*@
const CommonScript = {
		Init() {
			$('#messageControl').puigrowl(); @*Всплывающее сообщение*@
		},

		@*Отображает сообщение.*@
		showMessage(type, title, message) {
			const msg = ([{ severity: type, summary: title, detail: message }]);
			$('#messageControl').puigrowl('show', msg);
		},

		@*Ключ браузерного хранилища для  хранения уникального идентификатора
			не зарегистрированного пользователя.
		*@
		_storageUserGuidKey: 'gearShopNoRegisterUserGuid',
		@*Ключ корзины*@
		_storageBasketKey: 'gearShopBasket',

		@*Общая информация пользователя - имя, номер*@
		_storageUserDataKey: 'gearShopUserData',

		@*Возвращает уникальный идентификатор для не зарегистрированного пользователя. Из хранилищя его браузера.*@
		getUserGuidFromStorage() {
			return localStorage.getItem(CommonScript._storageUserGuidKey);
		},

		@*Сохраняет идентификатор не зарегистрированного пользователя в хранилище.*@
		saveUserGuidToStorage(guid) {
			localStorage.setItem(CommonScript._storageUserGuidKey, guid);
		},

		@*Идентификатор пользователя.*@
		userGuid: null,

		@*Возвращает уникальный идентификатор для не зарегистрированного пользователя, в его браузере.*@
		getUserGuid() {
		if (this.userGuid != null) return this.userGuid;

			let userGuid = CommonScript.getUserGuidFromStorage();
			if (userGuid != null) {
				CommonScript.userGuid = userGuid;
				return userGuid;
			}
		
			@*От сервера получаем новый идентификатор для не зарегистрированного пользователя.*@
			$.ajax({
				type: "GET",
				url: '@Url.Action("GetGuidFoNoRegistered", "User")',
				dataType: "json",
				beforeSend: function() {
				},
				error: function(error) {
					addMessage([{ severity: 'error', summary: 'Ошибка', detail: 'Ошибка получения данных.' }]);
				},
				success: function(response) {
					CommonScript.saveUserGuidToStorage(response.guid); @*Сохраняем в хранилище браузера пользователя*@
					CommonScript.userGuid = response.guid;
				
					return response.guid;
				}
			});
		},

		@*Синхронизирует уникальный идентификатор не зарегистрированного пользователя на стороне браузера и guid на стороне сервера. *@
		synchronizeNoRegUserGuid() {
			let userGuid = this.getUserGuidFromStorage();
			if (userGuid != null) return;
		
			@* Возможно удаление идентификатора в БД, проверяем наличие.
			  Если guid нет в БД – сервер его добавит.
			*@
			$.ajax({
				type: "GET",
				url: '@Url.Action("SynchronizeNoRegUserGuid", "User")',
				data: {guid: userGuid},
				beforeSend: function() {
				},
				error: function(error) {
					addMessage([{ severity: 'error', summary: 'Ошибка', detail: 'Ошибка получения данных.' }]);
				},
				success: function(response) {
				}
			});
		},

		@*Корзина*@
		basket: [],

		clearBasket() {
			this.basket = [];
			this.setBasketToLocal();
		},

		@*Сохраняет корзину в локальное хранилище(на стороне клиента)*@
		setBasketToLocal() {
			localStorage.setItem(CommonScript._storageBasketKey, JSON.stringify(CommonScript.basket));
		},

		getBacketFromStorage() {
			return localStorage.getItem(CommonScript._storageBasketKey);
		},

		@*Загружаетданные из хранилища если корзина пуста.*@
		readLastBasketIfEmpty() {
			if (CommonScript.basket.length == 0) {
				const basket = JSON.parse(this.getBacketFromStorage());
				if (basket == null) return;
				this.basket = basket;
			}
		},

		@*Конвертирует дату и время.*@
		convertDateTimeToString(dateTime) {
			const dt = new Date(dateTime);
			const padL = (nr, len = 2, chr = `0`) => `${nr}`.padStart(2, chr);

		  return `${padL(dt.getDate())}.${padL(dt.getMonth() + 1)}.${dt.getFullYear()} ${padL(dt.getHours())}:${
				padL(dt.getMinutes())}:${padL(dt.getSeconds())}`;
		},

		saveUserDataToStorage(data) {
			localStorage.setItem(this._storageUserDataKey, JSON.stringify(data));
		},

		readUserDataFromStorage() {
			const data = localStorage.getItem(this._storageUserDataKey);
			if (data == null) return null;

			return JSON.parse(data);
		},

		@*Является ли число целым?*@
		checkInteger(text) {
			const dig = parseInt(text);
			if (Number.isNaN(dig)) return false;

			return true;
		},

		@*Является ли число дробным?*@
		checkFloat(text) {
			const dig = parseFloat(text);
			if (Number.isNaN(dig)) return false;

		return true;
	}
}
</script>