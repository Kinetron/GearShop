@{
	Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
	.searchPanel {
		padding: 0 0 10px 0;
	}
	
	.product-cell{
		height: 180px!important;   
	}

	.product-title {
		height: 80px !important;
	}

	.loader {
		text-align: center;
	}

	.in-basket {
		color: green!important;
		box-sizing: border-box;
		padding: 0 5px 0 5px;
	}

	.image {
		padding: 10px;
		width: 120px;
		height: 120px;
	}

	.product-info {
		height: 120px;
	}

	.button-buy {
		padding: 5px;
		float: right;
	}
	
	.price {
		padding: 10px;
		font-weight: bold;
		font-size: 1.5em;
	}

	#buy-block{
		width: 100%;
		overflow: hidden;
	}

		#buy-block > div {
		width: 30%;
		display: inline-block;
	}
</style>

<div id="mainPanel">
	<div class="searchPanel">
		<input id="searchInput" type="text"/>
		<button id="searchButton" type="button">Поиск</button>
		<div id="messageControl"></div>
	</div>
	<div id="loaderIndicator" class="loader"><img src="/images/loader.gif"/>Загрузка данных...</div>
	<div id="tbProductList"></div>
	<div id="productsPaginator"></div>
	<label id="recordCountInfo"></label>
	<div id="localgrid"></div>
</div>

<script type="text/javascript">
$(document).ready(function() {
	BuyLogicScript.SynchronizeNoRegUserGuid(); 
	BuyUiScript.Init();

	@*Обновляет данные пейдженатора-количество строк и страниц.*@
	function UpdatePaginator(searchText) {
		$.ajax({
			type: "GET",
			url: '/ProductList/GetPaginateData',
			data: { searchText: searchText },
			dataType: "json",
			error: function (error) {
				console.log(error);
			},
			context: this,
			success: function (response) {
				$('#recordCountInfo').text(`Найдено ${response.totalRecords} товаров`);
				$('#productsPaginator').puipaginator({
					totalRecords: response.totalRecords,
					rows: response.rows 
				});

				$('#productsPaginator').puipaginator('setState', { totalRecords: response.totalRecords, page:0 });
			}
		});
	}

	function UpdateData(searchText) {
		$('#tbProductList').puidatagrid('reload');
		UpdatePaginator(searchText);
	}

	function GetFirstPageIndex() {
		return 1;
	}

	$('#mainPanel').puipanel();
	$('#searchInput').puiinputtext();
	$('#messageControl').puigrowl(); @*Всплывающее сообщение*@
	addMessage = function(msg) {
		$('#messageControl').puigrowl('show', msg);
	};

	let currentPage = GetFirstPageIndex();
		let searchText = '';

		$('#searchButton').puibutton({
			click: function(event) {
				searchText = $('#searchInput').val();
				UpdateData(searchText);
				currentPage = GetFirstPageIndex();
			}
		});

		$("#searchInput").on('keyup', function (e) {
		if (e.key === 'Enter' || e.keyCode === 13) {
			searchText = $('#searchInput').val();
			UpdateData(searchText);
			currentPage = GetFirstPageIndex();
		}
	});
	
	$('#productsPaginator').puipaginator({
			paginate: function(event, state) {
				currentPage = state.page + 1;
				$('#tbProductList').puidatagrid('reload');
			}
		});
		
		UpdatePaginator(searchText);

		$('#tbProductList').puidatagrid({
			header: 'Список товаров',
			datasource: function(callback) {
				$.ajax({
					type: "GET",
					url: '@Url.Action("GetProductList", "ProductList")',
					data: { currentPage: currentPage, searchText: searchText },
					dataType: "json",
					beforeSend: function() {
						$('#loaderIndicator').show();
					},
					error: function(error) {
						$('#loaderIndicator').hide();
						addMessage([{ severity: 'error', summary: 'Ошибка', detail: 'Ошибка получения данных.' }]);
					},
					context: this,
					success: function(response) {
						$('#loaderIndicator').hide();
						callback.call(this, response);
					}
				});
			},
			content: function (product) {
				return CreateProductCell(product);
			}
		});
});

	@*Купить товар.*@
		function buy(productId, productName) {
		
		$('#bay' + productId).text('В корзине');
		$('#bay' + productId).addClass('in-basket');

		$('#BasketLink').show();

		let product = { productId: productId, productName: productName };
		BuyLogicScript.Basket.push(product);
		console.log(BuyLogicScript.Basket);
		BuyLogicScript.SaveBasketToLocal();
		addMessage([{ severity: 'info', summary: 'Корзина', detail: `Товар ${productName} добавлен в корзину.` }]);
}

@*Переделать на шаблоны.*@
function CreateProductCell(product) {
	@*переделать на шаблон!!!*@
	let html = `<div class="ui-panel ui-widget ui-widget-content ui-corner-all product-cell">
						  <div class="product-info">
							<img align="left" src="/images/${product.imageName}" class="image">
							<div>${product.name}</div>									
						  </div>
						  <div id="buy-block">
								  <div class="price"> ${product.cost}&nbsp;₽</div>
								<div>В наличии: ${product.quantity}</div>
								<div>
									<button id="bay${product.id}" type="button" onClick="(buy(${product.id},'${product.name}'));"
												class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only button-buy">Купить</button>
								</div>					
						 </div>
					</div>`;

	let button = `bay${product.id}`;
	//console.log(button);
	$('#' + button).puibutton({
		click: function(event) {
			let id = product.id;
			console.log(product.id);
		}
	});

	return html;
}

@*Методы для работы UI интерфейса.*@
const BuyUiScript = {
	Init() {
	@*Нажатие на «Корзина» в меню.*@
		$('#BasketLink').click(function() {
				console.log(895);
		});
	},
}

@*Логика покупки товаров.*@
const BuyLogicScript = {
	@*Ключ браузерного хранилища для  хранения уникального идентификатора
		не зарегистрированного пользователя.
	*@
	StorageUserGuidKey: 'gearShopNoRegisterUserGuid',
	StorageBasketKey: 'gearShopBasket',
	UserGuid: null,

	@*Возвращает уникальный идентификатор для не зарегистрированного пользователя, в его браузере.*@
	GetUserGuid() {
		if (BuyLogicScript.UserGuid != null) return BuyLogicScript.UserGuid;

		let userGuid = localStorage.getItem(BuyLogicScript.StorageUserGuidKey);
		if (userGuid != null) {
			BuyLogicScript.UserGuid = userGuid;
			return userGuid;
		}
	
		@*От сервера получаем новый идентификатор для не зарегистрированного пользователя.*@
		$.ajax({
			type: "GET",
			url: '@Url.Action("GetGuidFoNoRegistered", "User")',
			dataType: "json",
			beforeSend: function() {
			},
			error: function(error) {
				addMessage([{ severity: 'error', summary: 'Ошибка', detail: 'Ошибка получения данных.' }]);
			},
			success: function(response) {
				localStorage.setItem(BuyLogicScript.StorageUserGuidKey, response.guid); @*Сохраняем в хранилище браузера пользователя*@
				BuyLogicScript.UserGuid = response.guid;
				
				return response.guid;
			}
		});
	},
	@*Синхронизирует уникальный идентификатор не зарегистрированного пользователя на стороне браузера и guid на стороне сервера. *@
	SynchronizeNoRegUserGuid() {
		let userGuid = localStorage.getItem(BuyLogicScript.StorageUserGuidKey);
		if (userGuid == null) return null;
		
	@* Возможно удаление идентификатора в БД, проверяем наличие.
	   Если guid нет в БД – сервер его добавит.
	*@
		$.ajax({
			type: "GET",
			url: '@Url.Action("SynchronizeNoRegUserGuid", "User")',
			data: {guid: userGuid},
			beforeSend: function() {
			},
			error: function(error) {
				addMessage([{ severity: 'error', summary: 'Ошибка', detail: 'Ошибка получения данных.' }]);
			},
			success: function(response) {
			}
		});
	},
	@*Корзина*@
	Basket: [],

	@*Сохраняет корзину в локальное хранилище(на стороне клиента)*@
	SaveBasketToLocal() {
		localStorage.setItem(BuyLogicScript.StorageBasketKey, JSON.stringify(BuyLogicScript.Basket));
		console.log(BuyLogicScript.Basket);
	}
}
</script>
	 